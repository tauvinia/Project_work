---
title: "Project"
format: html
editor: visual
---

# Packages

```{r}
## Default repository
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org" 
options(repos=r)
})

## Define function check_pkg to tests if package is already installed and hence only needs loading
check_pkg <- function(x)
{
  if (!require(x,character.only = TRUE))
  {
    install.packages(x,dep=TRUE)
    if(!require(x,character.only = TRUE)) stop("Package not found")
  }
}

## Call check_pkg()
check_pkg("pacman")
check_pkg("dplyr")
check_pkg("ggplot2")
check_pkg("readr")
check_pkg("tidyr")
check_pkg("sf")
check_pkg("terra")
check_pkg("tmap")
check_pkg("zoo")
check_pkg("units")
check_pkg("plotly")
check_pkg("patchwork")
check_pkg("gitcreds")
check_pkg("lubridate")
check_pkg("readr")
check_pkg("forcats")
check_pkg("osmdata")
check_pkg("OpenStreetMap")
check_pkg("ggmap")
check_pkg("osmextract")
check_pkg("sfnetworks")
```

#Trajectory data

##Read data

We have access to two datasets, a small and a large one. As long as there are sufficient routes in the smaller dataset, we will work with this one.

```{r}
## Read data 
# Small dataset
data <- read_delim("data/combined_data.csv", ",") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE) 

# Big dataset
data_1 <- read_delim("data/combined_data_1.csv", ",") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
```

## Separate timestamp into date and time

```{r}
# Convert the timestamp to POSIXct
data$timestamp <- ymd_hms(data$timestamp)

# Extract date component
data$date <- as.Date(data$timestamp)

# Extract time component
data$time <- format(data$timestamp, format = "%H:%M:%S")

# View the modified dataset
head(data)
```

## Select data within Karlsruhe

In order to reduce the data set in a first step, we have filtered the data that lies within the border of Karlsruhe.

```{r}
# Extract boundary of Karlsruhe
boundary <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "boundary",
                  value = "administrative") %>%
  osmdata_sf() %>%
  .$osm_multipolygons %>%
  filter(name == "Karlsruhe")

# Select data that is within this boundary
data <- st_filter(data, boundary)

# Plot
ggplot() +
  geom_sf(data = boundary) +
  geom_sf(data = data, color = "darkblue")
```

Occasionally, we encountered issues with a general Overpass server error when attempting to access this data. To address this problem, we stored the boundary data locally on our computers, ensuring continuous access to this data at any time.

```{r}
#boundary <- st_read("data/boundary.gpkg")
#data <- st_read("data/small_data.gpkg")

#ggplot() +
  geom_sf(data = boundary) +
  geom_sf(data = data, color = "green")
```

## Start and end point of the route

The starting point for the outbound routes is KriegsstraÃŸe 183, 76135 Karlsruhe, Germany. The coordinates of this point are stored in the variable home_point.

The end point for the return routes is Klosterweg 28, 76131 Karlsruhe, Germany. The coordinates of this point are stored in the variable hadiko_point.

```{r}
# Store start point
home_point <- st_point(c(8.36964749052686, 49.00535930123405)) %>% 
  st_sfc(crs = 4326)

# Store end point
hadiko_point <- st_point(c(8.4230360394263, 49.020260402061204)) %>% 
  st_sfc(crs = 4326)
```

# Extract route

Separate the drives

```{r}
# Calculate time differences between consecutive points in seconds
data <- data %>%
  arrange(timestamp) %>%  # Ensure data is sorted by time
  mutate(time_diff = c(NA, diff(timestamp)))

# Identify where the time difference exceeds 300 seconds (5 minutes)
data <- data %>%
  mutate(new_drive = ifelse(is.na(time_diff) | time_diff > 300, 1, 0))

# Assign drive IDs
data <- data %>%
  mutate(drive_id = cumsum(new_drive))

# View the resulting data
print(data)
```

Filter the drives that happened between "home" and "hadiko", separate them into datasets with ways "home to hadiko" and "hadiko to home", visualize.
```{r}
## Create function to filter drives
filter_drives <- function(start_point, start_distance, end_point, end_distance, data) {
   
    # Create the buffer around the start/end point
    start_buffer <- st_buffer(start_point, dist = start_distance)
    end_buffer <- st_buffer(end_point, dist = end_distance)
    
    # Check if the first point of each drive is within the start buffer
    first_points_within_start_buffer <- data %>%
      group_by(drive_id) %>%
      slice(1) %>%
      filter(st_within(geom, start_buffer, sparse = FALSE)) %>%
      pull(drive_id)
    
    # Check if the last point of each drive is within the end buffer
    last_points_within_end_buffer <- data %>%
      group_by(drive_id) %>%
      slice(n()) %>%
      filter(st_within(geom, end_buffer, sparse = FALSE)) %>%
      pull(drive_id)
    
    # Filter the original data to keep only rows with drive_id meeting both conditions
    valid_drive_ids <- intersect(first_points_within_start_buffer, last_points_within_end_buffer)
    data_start_end <- data %>%
      filter(drive_id %in% valid_drive_ids)
    print(valid_drive_ids)
    
    # Extract starting points for visualization
    starting_points <- data_start_end %>%
      group_by(drive_id) %>%
      slice(1) %>%
      ungroup()
    # Extract ending points for visualization
    ending_points <- data_start_end %>%
      group_by(drive_id) %>%
      slice(n()) %>%
      ungroup()
    # Visualize the starting/ending points and the start/end buffer as a ring
    plot <- ggplot() +
      geom_sf(data = data_start_end, aes(geometry = geom, colour = drive_id), alpha = 0.5, size = 0.1) +
      geom_sf(data = starting_points, aes(geometry = geom), color = "red", size = 1) +
      geom_sf(data = ending_points, aes(geometry = geom), color = "green", size = 1) +
      geom_sf(data = start_buffer, fill = NA, color = "red", size = 1, linetype = "dashed") +
      geom_sf(data = end_buffer, fill = NA, color = "green", size = 1, linetype = "dashed") +
      coord_sf() +
      theme_minimal() +
      labs(title = "Starting and Ending Points and Start/End Buffer Ring",
           subtitle = "Red points are the starting points, red dashed line is the start buffer ring, the same in green for end. Each drive has own colour")
    print(plot)
    return(data_start_end)
    
}
## Apply function
# on drives starting from home
data_from_home <- filter_drives(home_point, 500, hadiko_point, 500, data)
# on drives starting from Hadiko
data_from_hadiko <- filter_drives(hadiko_point, 500, home_point, 500, data)

```
To gain a better overview, we created a bounding box around the relevant data points.
```{r}
{r}
## Create bounding box around data
bbox <- st_bbox(data_from_home) |> 
  st_as_sfc()
```

Using group by, we obtained an overview of how many routes there are.

```{r}
## Group the data by drive_id
# Data from Home
group_data_from_home <- data_from_home %>%
  group_by(drive_id) %>%
  summarize(
    min_timestamp = min(timestamp),
    max_timestamp = max(timestamp)
  )

# Print
print(group_data_from_home)


# Data from Hadiko
group_data_from_hadiko <- data_from_hadiko %>%
  group_by(drive_id) %>%
  summarize(
    min_timestamp = min(timestamp),
    max_timestamp = max(timestamp)
  )

# Print
print(group_data_from_hadiko)

```


# Environmental Features OSM
To relate the data to the environment, we used OpenStreetMap data. With the two functions below, we obtained an overview of the available data.

```{r}
## Explore features
#available_features()

#available_tags(feature = "highway")
```

## Create Street Network
By extracting the highways, we created a street network for our bounding box.

```{r fig.width=50, fig.height=40}
# Extract highways
highway <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "highway") %>%
  osmdata_sf() %>%
  .$osm_lines 

# Convert object to sfnetwork object
street_network <- as_sfnetwork(highway, directed = FALSE) %>% # set as undirected
  st_intersection(bbox)
  
# Overview
street_network

# Plot
ggplot() +
  geom_sf(data = street_network %>% activate(edges) %>% st_as_sf(), aes(color = highway), size = 3) + 
  geom_sf(data = street_network %>% activate(nodes) %>% st_as_sf()) +
  theme_void()
```

We stored the nearest vertices to the start and endpoint of the routes.

```{r}
# Coordinates of all nodes in the network
vertices_sf <- street_network %>%
  activate(nodes) %>%
  st_as_sf()

# Find the id of the vertex closest to start point
start_vertex <- st_nearest_feature(home_point, vertices_sf)

# Find the id of the vertex closest to end point
end_vertex <- st_nearest_feature(hadiko_point, vertices_sf)

# Print
cat("Start Vertex:", start_vertex, "\n")
cat("End Vertex:", end_vertex)
```

## Green Spaces

To determine the green spaces in the area, parks and forests were extracted from OSM data. Since OSM polygons and multipolygons provided different data, both were extracted and then merged.

```{r}
# Parks
parks <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "leisure",
                  value = "park") %>%
  osmdata_sf() %>%
  .$osm_polygons %>%
  st_intersection(bbox)

# Forests Polygons
forest_polys <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "landuse",
                  value = "forest") %>%
  osmdata_sf() %>%
  .$osm_polygons %>%
  st_intersection(bbox)

# Forests Multipolygons
forest_multipolys <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "landuse",
                  value = "forest") %>%
  osmdata_sf() %>%
  .$osm_multipolygons %>%
  st_make_valid() %>% 
  st_intersection(bbox)

# Merge
green_spaces <- bind_rows(parks, forest_polys, forest_multipolys) |> 
  st_union() |> 
  st_make_valid()
```

As the grass polygons mostly intersect with the green space polygons and few data points pass through them, as we can see in the visualization below, we decided not to take this feature into account. We believe the green areas are well covered by the forest and park extractions, so the grass does not need to be considered.

```{r}
# Trees
trees <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "natural",
                  value = "tree") %>%
  osmdata_sf() %>%
  .$osm_points %>%
  st_intersection(bbox)

# Grass
grass <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "landuse",
                  value = "grass") %>%
  osmdata_sf() %>%
  .$osm_polygons %>%
  st_intersection(bbox)
```

## Visualization of OSM Features
To obtain a good overview of the extracted features, we visualized them.

```{r fig.width=50, fig.height=40}
# Plot
ggplot() +
  
  # Edges of street network
    geom_sf(data = street_network %>% activate(edges) %>% st_as_sf(), size = 2, color = "black") +

  # Green Spaces
  geom_sf(data = forest_multipolys, fill = "lightgreen") +
  
  # Trees
  geom_sf(data = trees, color = "darkgreen", size = 3) +
  
  # Grass
  geom_sf(data = grass, fill = "green") +
  
  # Movement data
  geom_sf(data = data_from_home, color = "steelblue", size = 1) +
  geom_sf(data = data_from_hadiko, color = "darkred", size = 1) +
  
  # Theme
  theme_void()
```

##Analysis

#Duration per drive
```{r}
## Create function to calculate time per route
calculate_difftime <- function(data, unit) {
  data |> 
    group_by(drive_id) |> 
    mutate(
      timelag = as.numeric(difftime(lead(timestamp), timestamp, units = unit))
    ) |> 
    summarise(
      difftime = sum(timelag, na.rm = TRUE)
    ) |> 
    mutate(
      difftime = round(as.numeric(difftime), 1)
    )
}


## Apply function
# Data from home
duration_from_home <- calculate_difftime(data_from_home, "mins")

# Data from Hadiko
duration_from_hadiko <- calculate_difftime(data_from_hadiko, "mins")


## Plot
boxplot(duration_from_home$difftime, duration_from_hadiko$difftime,
        main = "Duration per Drive",
        las = 2,
        col = c("steelblue4", "darkred"),
        ylab = "Minutes",
        xlab = "Startpoint",
        names = c("Home", "Hadiko")
        )
```

##Environment
Firstly, we filtered the points that have coordinates within the green spaces. Secondly, we calculated the duration of time spent within these green spaces using the function that we had previously created.

```{r}
## Filter points in green spaces and calculate time spent in them
# From Home
green_spaces_from_home <- data_from_home |> 
  st_filter(green_spaces) |> 
  calculate_difftime("mins")

# From Hadiko
green_spaces_from_hadiko <- data_from_hadiko |> 
  st_filter(green_spaces) |> 
  calculate_difftime("mins")
```

We plotted the results to verify their plausibility.

```{r fig.width=10, fig.height=3}
## Plot for overview
# Data from home
ggplot() +
  geom_sf(data = street_network %>% activate(edges) %>% st_as_sf(), size = 2, color = "lightgrey") +
  geom_sf(data = green_spaces, color = "darkolivegreen2", fill = "darkolivegreen2") +
  geom_sf(data = data_from_home, color = "steelblue1", size = 0.4) +
  geom_sf(data = green_spaces_from_home, color = "steelblue4", size = 0.4) +
  theme_void() +
  ggtitle("Drives from Home to Hadiko") +
  theme(plot.title = element_text(hjust = 0.5)) +

# Data from Hadiko
ggplot() +
  geom_sf(data = street_network %>% activate(edges) %>% st_as_sf(), size = 2, color = "lightgrey") +
  geom_sf(data = green_spaces, color = "darkolivegreen2", fill = "darkolivegreen2") +
  geom_sf(data = data_from_hadiko, color = "brown1", size = 0.4) +
  geom_sf(data = green_spaces_from_hadiko, color = "darkred", size = 0.4) +
  theme_void() +
  ggtitle("Drives from Hadiko to Home") +
  theme(plot.title = element_text(hjust = 0.5))
```

In order to ascertain the proportion of time spent in green areas per drive, the percentage of time spent in green areas per drive was calculated.

```{r}
## Join it with the overall duration to compare the results
# From home
green_spaces_from_home <- green_spaces_from_home |> 
  st_drop_geometry() |> 
  left_join(duration_from_home, by = "drive_id", suffix = c(".green_spaces", ".overall")) |> 
  mutate(
    percentage_green_space = (difftime.green_spaces / difftime.overall) * 100
  )

# From Hadiko
green_spaces_from_hadiko <- green_spaces_from_hadiko |> 
  st_drop_geometry() |> 
  left_join(duration_from_hadiko, by = "drive_id", suffix = c(".green_spaces", ".overall")) |> 
  mutate(
    percentage_green_space = (difftime.green_spaces / difftime.overall) * 100
  )

# Print
print(green_spaces_from_home)
print(green_spaces_from_hadiko)

# Plot
boxplot(green_spaces_from_home$percentage_green_space, green_spaces_from_hadiko$percentage_green_space,
        main = "Percentage of Time Spent in Green Spaces per Drive",
        las = 2,
        col = c("steelblue4", "darkred"),
        ylab = "Percentage",
        xlab = "Startpoint",
        names = c("Home", "Hadiko")
        )
```
##Mapmatching GPS points to the road network

https://computationalmovementanalysis.github.io/FS24/Appendix/Appendix.html#mapmatching-gps-points-to-the-road-network

```{r}
# Store edges in variable
edges <- street_network %>% activate(edges) %>% st_as_sf()

# Union
edges <- st_union(edges)

# Get nearest point for each GPS location
nearest <- st_nearest_points(filtered_data, edges)

# Convert the output from LINE to POINT
near_p <- st_cast(nearest, "POINT")

## Uneven numbers are the original points, even numbers are the new, mapmatched points
# Original points
near_from <- near_p[c(TRUE, FALSE)]
mapmatched <- near_p[c(FALSE,TRUE)]
```

```{r}
tm_shape(edges) + tm_lines() +
  tm_shape(nearest) + tm_lines(lty = 3) +
  tm_shape(near_from) + tm_dots() +
  tm_shape(near_to) + tm_dots(col = "red")
```
Example:

```{r}
library(sf)
library(tmap)

# Get a sample road dataset
HighWays <- read_sf(system.file("sqlite/test3.sqlite",package="sf"), "HighWays")[6, ] 

# since we want to find the closest location on the road over ALL roads
# we need to create a union of the roads first.
HighWays <- st_union(HighWays)

# Let's simulate 1000 GPS locations within 3km of the highway
gps_locations <- HighWays |> st_buffer(3000) |> st_sample(100)

# Now we can get the nearset point for each GPS location
nearest <- st_nearest_points(data, street_network)

# The output is a line for each point (see plot below)
# Now we need convert the output from LINE to POINT. 
# This doubles the number of features
near_p <- st_cast(nearest, "POINT")

# now we subset the points. Uneven numbers are the original
# points, even numbers are the new, mapmatched points.
near_from <- near_p[c(TRUE, FALSE)]
near_to <- near_p[c(FALSE,TRUE)]
```
Calculate similarity

```{r}
bbox <- st_bbox(data_from_home) |> 
  st_as_sfc()

ggplot() +
  geom_sf(data = bbox) +
  geom_sf(data = data_from_home) +
  geom_sf(data = data_from_hadiko)
```

```{r}
# Join data from home with park data from osm
data_from_home <- st_join(data_from_home, parks)

# Plot
ggplot() +
  geom_sf(data = parks, color = "#548B54", fill = "#548B54") +
  geom_sf(data = data_from_home, color = "black", size = 0.5) +
  theme_minimal()
```



