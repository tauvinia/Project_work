---
title: "Project"
format: html
editor: visual
---
# Packages
```{r}
## Default repository
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org" 
options(repos=r)
})

## Define function check_pkg to tests if package is already installed and hence only needs loading
check_pkg <- function(x)
{
  if (!require(x,character.only = TRUE))
  {
    install.packages(x,dep=TRUE)
    if(!require(x,character.only = TRUE)) stop("Package not found")
  }
}

## Call check_pkg()
check_pkg("pacman")
check_pkg("dplyr")
check_pkg("ggplot2")
check_pkg("readr")
check_pkg("tidyr")
check_pkg("sf")
check_pkg("terra")
check_pkg("tmap")
check_pkg("zoo")
check_pkg("units")
check_pkg("plotly")
check_pkg("patchwork")
check_pkg("gitcreds")
check_pkg("lubridate")
check_pkg("readr")
check_pkg("forcats")
check_pkg("osmdata")
check_pkg("OpenStreetMap")
check_pkg("ggmap")
check_pkg("osmextract")
check_pkg("sfnetworks")
```

# Trajectory data
## Read data
```{r}
## Read data 
# Small dataset
data <- read_delim("data/combined_data.csv", ",") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE) 

# Big dataset
data_1 <- read_delim("data/combined_data_1.csv", ",") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
```

```{r}
filter <- filter(data, latitude >= 49.00535930123405, longitude >= 8.36964749052686)

filter2 <- filter(data, latitude < 49.020260402061204, longitude < 8.4230360394263)
```



## Select data within Karlsruhe
```{r}
# Extract boundary of Karlsruhe
boundary <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "boundary",
                  value = "administrative") %>%
  osmdata_sf() %>%
  .$osm_multipolygons %>%
  filter(name == "Karlsruhe")

# Select data that is within this boundary
filter2 <- st_intersection(filter2, boundary)

# Plot
ggplot() +
  geom_sf(data = boundary) +
  geom_sf(data = data, color = "green") +
  geom_sf(data = filter2, color = "blue")
```

## Start and end point of the route
Start point:
KriegsstraÃŸe 183, 76135 Karlsruhe, Deutschland

End point:
Klosterweg 28, 76131 Karlsruhe, Deutschland

```{r}
# Store start point
start_point <- st_point(c(8.36964749052686, 49.00535930123405)) %>% 
  st_sfc(crs = 4326)

# Store end point
end_point <- st_point(c(8.4230360394263, 49.020260402061204)) %>% 
  st_sfc(crs = 4326)
```


# OSM
```{r}
# Explore features
available_features()

available_tags(feature = "highway")
```

## Create Street Network
```{r fig.width=50, fig.height=40}
# Extract highways
highway <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "highway") %>%
  osmdata_sf() %>%
  .$osm_lines 

# Convert object to sfnetwork object
street_network <- as_sfnetwork(highway, directed = FALSE) %>% # set as undirected
  st_intersection(boundary)
  
# Overview
street_network

# Plot
ggplot() +
  geom_sf(data = boundary, color = "black", fill = "white") +
  geom_sf(data = street_network %>% activate(edges) %>% st_as_sf(), aes(color = highway), size = 2) + 
  geom_sf(data = street_network %>% activate(nodes) %>% st_as_sf()) +
  theme_minimal()
```

Find nearest vertices of start and end point of the route
```{r}
# Coordinates of all nodes in the network
vertices_sf <- street_net %>%
  activate(nodes) %>%
  st_as_sf()

# Find the id of the vertex closest to start point
start_vertex <- st_nearest_feature(start_point, vertices_sf)

# Find the id of the vertex closest to end point
end_vertex <- st_nearest_feature(end_point, vertices_sf)

# Print
cat("Start Vertex:", start_vertex, "\n")
cat("End Vertex:", end_vertex)
```

## Trees
```{r}
# Extract trees
trees <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "natural",
                  value = "tree") %>%
  osmdata_sf() %>%
  .$osm_points %>%
  st_intersection(boundary)

# Plot
ggplot() +
  geom_sf(data = boundary, color = "black", fill = "lightblue") +
  geom_sf(data = trees, color = "darkgreen") +
  theme_minimal()
```

## Parks
```{r}
# Extract green spaces
parks <- getbb(place_name = "Karlsruhe") %>%
  opq() %>%
  add_osm_feature(key = "leisure",
                  value = "park") %>%
  osmdata_sf() %>%
  .$osm_polygons %>%
  st_intersection(boundary)

# Plot
ggplot() +
  geom_sf(data = boundary, color = "black", fill = "lightblue") +
  geom_sf(data = parks, color = "darkgreen", fill = "darkgreen") +
  theme_minimal()
```

# Mapmatching GPS points to the road network
https://computationalmovementanalysis.github.io/FS24/Appendix/Appendix.html#mapmatching-gps-points-to-the-road-network

```{r}
# Store edges in variable
edges <- street_net %>% activate(edges) %>% st_as_sf()

# Union
edges <- st_union(edges)

# Get nearest point for each GPS location
nearest <- st_nearest_points(gps_locations, edges)

# Plot
ggplot() +
  geom_sf(data = nearest)
```


Example:
```{r}
library(sf)
library(tmap)

# Get a sample road dataset
HighWays <- read_sf(system.file("sqlite/test3.sqlite",package="sf"), "HighWays")[6, ] 

# since we want to find the closest location on the road over ALL roads
# we need to create a union of the roads first.
HighWays <- st_union(HighWays)

# Let's simulate 1000 GPS locations within 3km of the highway
gps_locations <- HighWays |> st_buffer(3000) |> st_sample(100)

# Now we can get the nearset point for each GPS location
nearest <- st_nearest_points(data, street_network)

# The output is a line for each point (see plot below)
# Now we need convert the output from LINE to POINT. 
# This doubles the number of features
near_p <- st_cast(nearest, "POINT")

# now we subset the points. Uneven numbers are the original
# points, even numbers are the new, mapmatched points.
near_from <- near_p[c(TRUE, FALSE)]
near_to <- near_p[c(FALSE,TRUE)]
```


# Environment
```{r}
available_features()
```

```{r}
available_tags("surface")
```










